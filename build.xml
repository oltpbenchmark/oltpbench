<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="benchmark">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../Applications/eclipse3.4"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="javac.target" value="1.6"/>
    <property name="javac.source" value="1.6"/>

    <!-- *************************************** CONFIGURATION *************************************** -->
    
    <property name="src.dir"                    location="src" />
    <property name="tests.dir"                  location="tests" />
    <property name="lib.dir"                    location="lib" />
    <property name="build.dir"                  location="build" />
    <property name="build.src.dir"              location="${build.dir}/src" />
    <property name="build.tests.dir"            location="${build.dir}/tests" />
    <property name='build.testoutput.dir'       location='${build.dir}/testoutput' />

    <path id='project.classpath'>
        <pathelement location='${build.src.dir}' />
        <pathelement location='${build.tests.dir}' />
        <fileset dir='${lib.dir}'>
            <include name='*.jar' />
            <exclude name='ant.jar' />
        </fileset>
        <pathelement path="${java.class.path}"/>
    </path>

    <!-- *************************************** BUILDING *************************************** -->
    
    <target name="build">
        <fileset dir="${src.dir}" excludes="**/*.launch, **/*.java"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        
        <mkdir dir="${build.src.dir}"/>
        <javac debug="true" debuglevel="${debuglevel}" includeantruntime="false"
               destdir="${build.src.dir}"
               source="${javac.source}"
               target="${javac.target}">
            <src path="${src.dir}"/>
            <classpath refid="project.classpath" />
        </javac>
        
        <!-- Copy SQL DDL Files -->
        <copy todir="${build.src.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*-ddl.sql"/>
            </fileset>
        </copy>
        
        <mkdir dir="${build.tests.dir}"/>
        <javac debug="true" debuglevel="${debuglevel}" includeantruntime="false"
               destdir="${build.tests.dir}"
               source="${javac.source}"
               target="${javac.target}">
            <src path="${tests.dir}"/>
            <classpath refid="project.classpath" />
        </javac>
    </target>

    <target name="clean" description="Destroys all generated files and dirs.">
        <delete dir="${build.dir}"/>
    </target>

   <!-- *************************************** TESTING *************************************** -->
    
    <!-- common junit parameters go here -->
    <macrodef name='run_junit'>
        <attribute name='timeout' default='240000' />
        <attribute name='printsummary' default='off' />
        <attribute name='showoutput' default='false' />
        <element name='tests'/>
        <element name='formatters'/>
        
        <sequential>
            <mkdir dir='${build.testoutput.dir}' />
            <junit
                fork="yes"
                haltonfailure="${junit.haltonfailure}"
                failureproperty="junit.failures"
                printsummary="@{printsummary}"
                timeout="@{timeout}"
                maxmemory='1024M'
                showoutput="@{showoutput}"
            >
                <classpath refid='project.classpath' />
                <jvmarg value="-Djava.library.path=${build.dir}/nativelibs" />
                <jvmarg value="-server" />
                <jvmarg value="-Xcheck:jni" />
                <jvmarg value="-Xmx2048m"/>
                <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError"/>
                
                <formatters/>
                <batchtest todir="${build.testoutput.dir}">
                    <tests/>
                </batchtest>
                <assertions><enable/></assertions>
            </junit>
        </sequential>
    </macrodef>
    
    <target name="junit" description="Run testcases for Java classes.">
        <!-- Run the unit tests -->
        <condition property="timeoutLength" value="${timeoutLength}" else='600000'>
            <isset property="timeoutLength"/>
        </condition>

        <run_junit timeout="${timeoutLength}" printsummary="yes">
            <formatters>
                <formatter type="plain" unless="hudson"/>
                <formatter type="xml" />
            </formatters>
            <tests>
                <fileset dir='${build.tests.dir}'>
                    <include name="**/Test*.class"/>
                </fileset>
            </tests>
        </run_junit>

        <!-- Generate unit test reports. -->
<!--        <mkdir dir='${build.testoutput.dir}/report' />
        <junitreport todir="${build.testoutput.dir}">
            <fileset dir='${build.testoutput.dir}'>
                <include name="*.xml" />
                <exclude name='TESTS-TestSuites.xml' />
            </fileset>
            <report format="noframes" todir="${build.testoutput.dir}/report"/>
            <report
                styledir="tools"
                format="noframes"
                todir="${build.testoutput.dir}"
            />
        </junitreport>

        <exec dir="${build.testoutput.dir}" executable='cat'>
            <arg line="junit-noframes.html"/>
        </exec>
        <delete
            dir='${build.testoutput.dir}'
            includes='*.xml'
            excludes='TESTS-TestSuites.xml'
        />-->
        <!-- Fail the build if there were any problems.
            This runs all the tests before failing. -->
        <fail
            if="junit.failures"
            unless="emma.enabled"
            message="JUnit had failures"
        />
    </target>
</project>
