# LinkBench workload configuration file for Facebook social graph workload
#
#
# Default parameters emulate a scaled-down version of Facebook's real
# social graph workload.  The default parameters generate a benchmark
# database of approximately 10GB, which is approximate for testing, but
# too small for full-scale benchmarking. To generate a bigger graph,
# increase maxid1.

# Optionally you can change workload parameters to modify benchmark data
# and the request workload.

######################
#    Data Files      #
######################

# Path for file with real distributions for links, accesses, etc.
# Can be absolute path, or relative path from LinkBench home directory
data_file = config/extras/LinkBenchDistribution.dat

###############################
#                             #
#  Load Phase Configuration   #
#                             #
###############################

# number of threads to run during load phase
loaders = 8

# whether to generate graph nodes during load process
generate_nodes = true

# partition loading work into chunks of id1s of this size
loader_chunk_size = 1028

#####################################
#                                   #
#  Graph Generation Configuration   #
#                                   #
#####################################

# start node id (inclusive)
startid1 = 1

# end node id for initial load (exclusive)
# With default config and MySQL/InnoDB, 1M ids ~= 1GB
maxid1 = 100001

# Number of distinct link types (link outdegree is shared among types)
link_type_count = 2

# +----------------------------+
# |Graph outdegree distribution|
# +----------------------------+
# These parameters control how the outdegree of each node in the graph
# is chosen.

# nlinks_func selects the outdegree distribution function.  Options are:
## REAL: use the empirically observed distribution in the data file
nlinks_func = real

## ProbabilityDistribution class name: use the probability distribution
#     with other parameters for that class with the nlinks_ prefix. E.g.
# nlinks_func = com.oltpbenchmark.benchmarks.linkbench.distributions.ZipfDistribution
# nlinks_shape = 1.5
# nlinks_mean = 2000000

## A synthetic distribution
# RECIPROCAL: small id1s tend to get more #links :
#          #links(id1) = maxid1/(1+id1)
# MULTIPLES: id1s that are multiples of nlinks_config get
#   nlinks_config links  (rest get nlinks_default)
# PERFECT_POWERS means perfect squares/cubes/etc get more #links
#   (rest get nlinks_default)
#   the larger a perfect square is, the more #links it gets.
#   nlinks_config controls whether it is squares, cubes, etc
# EXPONENTIAL means exponential i.e powers of nlinks_config get more #links
#nlinks_func = RECIPROCAL
# config param that goes along with nlinks_func
#nlinks_config = 1
# minimum link count: use 0 or 1 for this
#nlinks_default = 0

# +--------------------------+
# | Link ID2 selection       |
# +--------------------------+
# These options allow selection of alternative behavior for selecting
# link id2s of edges in graph

# if nonzero, generate id2 uniformly between 0 and this - 1 during load
# and lookups.  Must be < 2^31
# randomid2max = 0

# +----------------------+
# |Node/link payload data|
# +----------------------+
# Median payload data size of links
link_datasize = 8

# Data generator for new links
# Default settings give ~30% compression ratio
link_add_datagen = com.oltpbenchmark.benchmarks.linkbench.generators.MotifDataGenerator
link_add_datagen_startbyte = 32
link_add_datagen_endbyte = 100
link_add_datagen_uniqueness = 0.225
link_add_datagen_motif_length = 128

# Data generator for link updates
link_up_datagen = com.oltpbenchmark.benchmarks.linkbench.generators.MotifDataGenerator
link_up_datagen_startbyte = 32
link_up_datagen_endbyte = 100
link_up_datagen_uniqueness = 0.225
link_up_datagen_motif_length = 128

# Median payload data size of nodes
node_datasize = 128

# Data generator for new nodes
# Node data generators give ~60% compression ratio
node_add_datagen = com.oltpbenchmark.benchmarks.linkbench.generators.MotifDataGenerator
node_add_datagen_startbyte = 50
node_add_datagen_endbyte = 220
node_add_datagen_uniqueness = 0.63

# Data generator for node updates
node_up_datagen = com.oltpbenchmark.benchmarks.linkbench.generators.MotifDataGenerator
node_up_datagen_startbyte = 50
node_up_datagen_endbyte = 220
node_up_datagen_uniqueness = 0.63

#####################################
#                                   #
#  Request Workload Configuration   #
#                                   #
#####################################

# configuration for generating id2 in the request phase
# 0 means thread i generates id2 randomly without restriction;
# 1 means thread i generates id2 such that id2 % nrequesters = i,
#   this is to prevent threads from adding/deleting/updating same cells,
#   always use this configuration (1) when using HBaseGeneralAtomicityTesting;
id2gen_config = 0

# Operation mix for request phase
# numbers are percentages and must sum to 100
addlink = 8.9886601
deletelink = 2.9907664
updatelink = 8.0122125
countlink = 4.8863567
getlink = 0.5261142
getlinklist = 50.7119145
getnode = 12.9326683
addnode = 2.5732789
updatenode = 7.366437
deletenode = 1.0115914

# Controls what proportion of linklist queries above will try
# to retrieve more history
getlinklist_history = 0.3

# +-------------------------+
# |Node access distributions|
# +-------------------------+
# These control the access patterns of different classes of operations.
# The following distributions can be configured

# read_* : link reads (dist is correlated with outdegree)
# write_* : link writes (dist is correlated with outdegree)
# read_uncorr_* : optionally, mix in an uncorrelated distribution
# write_uncorr_* : optionally, mix in an uncorrelated distribution
# node_read_* : node reads
# node_update_* : node updates
# node_delete_* : node deletes

# For each of these the *_func parameter selects an access pattern.
# The available options are:
# * Any ProbabilityDistribution class (e.g. ZipfDistribution)
# * REAL - Real empirical distribution for reads/writes as appropriate
# * ROUND_ROBIN - Cycle through ids
# * RECIPROCAL - Pick with probability
# * MULTIPLE - Pick a multiple of config parameter
# * POWER - Pick a power of config parameter
# * PERFECT_POWER - Pick a perfect power (square, cube, etc) with exponent
#                    as configured

# read_function controls access patterns for link reads
# shape for Zipf based on pareto parameter of 1.25
read_function = com.oltpbenchmark.benchmarks.linkbench.distributions.ZipfDistribution
read_shape = 0.8

# Example of using POWER
#read_function = POWER
#read_param = 2

# read_uncorr_function is alternative to read_function that is
#  uncorrelated to outdegree
# blend: % of link reads to use uncorrelated func for
# Here we have high proportion uncorrelated to keep range scan size down
read_uncorr_blend = 99.5
read_uncorr_function = com.oltpbenchmark.benchmarks.linkbench.distributions.ZipfDistribution
read_uncorr_shape = 0.8

# write_function controls access patterns for link writes
# shape for Zipf based on pareto parameter of 1.35
write_function = com.oltpbenchmark.benchmarks.linkbench.distributions.ZipfDistribution
write_shape = 0.741

# write_uncorr_function is alternative to write_* that is uncorrelated
#  to outdegree
# 95% uncorrelated give weak correlation with outdegree
write_uncorr_blend = 95
write_uncorr_shape = 0.741
write_uncorr_config = 1

# node_read_function controls reads for graph nodes
# shape for Zipf based on pareto parameter of 1.6
node_read_function = com.oltpbenchmark.benchmarks.linkbench.distributions.ZipfDistribution
node_read_shape = 0.625

# node_update_functions controls updates for graph nodes
# shape for Zipf based on pareto parameter of 1.65
node_update_function = com.oltpbenchmark.benchmarks.linkbench.distributions.ZipfDistribution
node_update_shape = 0.606

# Use uniform rather than skewed distribution for deletes, because:
# a) we don't want to delete the most frequently read nodes
# b) nodes can only be deleted once
node_delete_function = com.oltpbenchmark.benchmarks.linkbench.distributions.UniformDistribution

# Distribution to select how many ids per link get request.  Comment
# out to only get one link at a time
link_multiget_dist = com.oltpbenchmark.benchmarks.linkbench.distributions.GeometricDistribution
link_multiget_dist_min = 1
link_multiget_dist_max = 128
# Prob param for geometric distribution approximating real mean of ~2.6
link_multiget_dist_prob = 0.382
