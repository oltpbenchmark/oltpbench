

This contains a JDBC implementation of TPC-C. It was based on
http://jtpcc.sourceforge.net/

However, we fixed a number of bugs, and we believe our benchmark framework
is "better." Here are some incomplete directions for running experiments:


Overview:
* Start a clean TPC-C database
* "Warm" the buffer pool by running some queries
* Run the experiment for 60 minutes.
* At the 20 minute mark, trigger the migration.
* It would be good to know how long the migration actually took to complete.

Ideally, we will look at the throughput and latency numbers over time, and we will see something interesting. Directions for the direct experiments talking with MySQL. We will eventually want to repeat these experiments talking to MySQL through our system, but I'm currently making changes there, so we'll need to do this later.


1. Grab the latest version of MySQL. You can get it from:

scp -r vise:~evanj/mysql-5.5.7-rc-linux2.6-x86_64 .


2. Grab a 32 warehouse database:

scp -r vise:~evanj/tpcc_mysql-32orig .


3. Copy it to a new directory:

cp -ar tpcc_mysql-32orig tpcc_mysql


4. Start mysql in one terminal in screen. I've been using the following script:

#!/bin/sh
DATADIR=/home/evanj/tpcc_mysql
BASEDIR=/home/evanj/mysql-5.5.7-rc-linux2.6-x86_64

OPTIONS="--innodb-buffer-pool-size=8G
       --innodb_log_file_size=256M
       --innodb_flush_method=O_DIRECT
       --port=3310
       --transaction_isolation=serializable
       --max_connections=300"

$BASEDIR/bin/mysqld --no-defaults --basedir=$BASEDIR --socket=mysql.sock \
       --datadir=$DATADIR --pid-file=mysql.pid --tmpdir=$DATADIR $OPTIONS


5. Grab the benchmark code and build it on the "client" machine. saw is probably a good choice.

svn co svn+ssh://svn.csail.mit.edu/afs/csail/group/db/REPOS/relationalcloud.com/packdb/trunk/bench bench
cd bench
ant


6. Run the mysql client on the client machine, and make sure it can connect to the test machine. Otherwise, you might need the appropriate "GRANT ALL ON tpcc.* TO root@'128.80.%';" (replacing the IP address as needed).


7. Run the "warm the cache" script:

mysql --user=root --host=* --port=3310 tpcc < run/sql/warm.sql > /dev/null


8. Run a short test to make sure the damned thing works. This should run for 5 minutes and print out some results in CSV format at the end:

java -cp ./build/classes:./lib/commons-lang-2.5.jar:./lib/mysql-connector-java-5.1.10-bin.jar -Dnwarehouses=32 -Dnterminals=160 -Ddriver=com.mysql.jdbc.Driver -Dconn=jdbc:mysql://HOSTNAME:3310/tpcc -Duser=root client.TPCCOverTime 300

When I run this, it takes some time to warm up, but eventually mysqld uses ~ 800% CPU. When it finishes, it will dump some numbers to standard output in CSV format.


9. Run the benchmark! Ideally this will actually work. It will take 60 minutes to run:

java -cp ./build/classes:./lib/commons-lang-2.5.jar:./lib/mysql-connector-java-5.1.10-bin.jar -Dnwarehouses=32 -Dnterminals=160 -Ddriver=com.mysql.jdbc.Driver -Dconn=jdbc:mysql://HOSTNAME:3310/tpcc -Duser=root client.TPCCOverTime 3600 > mysql-direct.csv
