//------------------------------------------------------------------
//	 					FROM THE selectPage TRANSACTION
//------------------------------------------------------------------

ORIGINAL: SELECT * FROM `user` WHERE user_id = ? LIMIT 1

(user_id is primary key)

ON NEW: SELECT * FROM `user` WHERE user_id = ? LIMIT 1
IF EMPTY 
	ON OLD (cacheable): SELECT * FROM `user` WHERE user_id = ? LIMIT 1
	ON NEW (cacheable): INSERT IGNORE INTO `user` VALUES(results from above);
	ON NEW (cacheable): SELECT * FROM `user` WHERE user_id = ? LIMIT 1

//------------------------------------------------------------------
ORIGINAL: SELECT ug_group FROM `user_groups` WHERE ug_user = ?  

(prefix of unique key, but can't guarantee we have all data)

ON OLD (cacheable): SELECT * FROM `user_groups` WHERE ug_user = ?
ON NEW (cacheable): INSERT IGNORE INTO `user_groups` VALUES(results from above);
ON NEW: SELECT * FROM `user` WHERE user_id = ? LIMIT 1

//------------------------------------------------------------------

ORIGINAL: SELECT * FROM `page` WHERE page_namespace = ? AND page_title = ? LIMIT 1  

(unique key)

ON NEW: SELECT * FROM `page` WHERE page_namespace = ? AND page_title = ? LIMIT 1
IF EMPTY 
	ON OLD (cacheable): SELECT * FROM `page` WHERE page_namespace = ? AND page_title = ? LIMIT 1
	ON NEW (cacheable): INSERT IGNORE INTO `page` VALUES(results from above);
	ON NEW (cacheable): SELECT * FROM `page` WHERE page_namespace = ? AND page_title = ? LIMIT 1
	
//------------------------------------------------------------------

ORIGINAL: SELECT * FROM `page_restrictions` WHERE pr_page = ?

(this is a unique key prefix which could be managed some smart way, but for now we just do simple stuff)

ON OLD (cacheable): SELECT * FROM `page_restrictions` WHERE pr_page = ?
ON NEW (cacheable): INSERT IGNORE INTO `page_restrictions` VALUES(results from above);
ON NEW: SELECT * FROM `page_restrictions` WHERE pr_page = ?
	
	
//------------------------------------------------------------------

ORIGINAL: SELECT * FROM `ipblocks` WHERE ipb_user = ?

(general purpose, however is small table, we might want to get everything ahead of time)

ON OLD (cacheable): SELECT * FROM `ipblocks` WHERE ipb_user = ?
ON NEW (cacheable): INSERT IGNORE INTO `ipblocks` VALUES(results from above);
ON NEW: SELECT * FROM `ipblocks` WHERE ipb_user = ?
	
		
//------------------------------------------------------------------

ORIGINAL: SELECT * FROM `page`,`revision` WHERE (page_id=rev_page) AND rev_page = ? AND page_id = ? AND (rev_id=page_latest) LIMIT 1

(OPTION1:general purpose solution, always valid)
ON OLD (cacheable): SELECT * FROM `page` WHERE page_id = ?;
ON NEW (cacheable): INSERT IGNORE INTO `page` VALUES(results from above);
ON OLD (cacheable): SELECT * FROM `revision` WHERE rev_page = ?;  //return many many tuples (that anyway we eventually need)
ON NEW (cacheable): INSERT IGNORE INTO `revision` VALUES(results from above);
ON NEW: SELECT * FROM `page`,`revision` WHERE (page_id=rev_page) AND rev_page = ? AND page_id = ? AND (rev_id=page_latest) LIMIT 1
	
(OPTION2: special trick, rev_id=page_lates is a FK-PK query, and page_id is equality of PK)
		
ON OLD (cacheable): SELECT p.* FROM `page` p,`revision` r WHERE (page_id=rev_page) AND rev_page = ? AND page_id = ? AND (rev_id=page_latest) LIMIT 1
ON NEW (cacheable): INSERT IGNORE INTO `page` VALUES(results from above);
ON OLD (cacheable): SELECT r.* FROM `page` p,`revision` r WHERE (page_id=rev_page) AND rev_page = ? AND page_id = ? AND (rev_id=page_latest) LIMIT 1
ON NEW (cacheable): INSERT IGNORE INTO `revision` VALUES(results from above);
ON NEW: SELECT * FROM `page`,`revision` WHERE (page_id=rev_page) AND rev_page = ? AND page_id = ? AND (rev_id=page_latest) LIMIT 1

(OPTION3: equivalent to option 2 but I can just select * and extract tuples from resultset)
ON OLD (cacheable): SELECT p.*, r.* FROM `page` p,`revision` r WHERE (page_id=rev_page) AND rev_page = ? AND page_id = ? AND (rev_id=page_latest) LIMIT 1
ON NEW (cacheable): INSERT IGNORE INTO `page` VALUES(first part of results from above);
ON NEW (cacheable): INSERT IGNORE INTO `revision` VALUES(second part of results from above);
ON NEW: SELECT * FROM `page`,`revision` WHERE (page_id=rev_page) AND rev_page = ? AND page_id = ? AND (rev_id=page_latest) LIMIT 1

//------------------------------------------------------------------

ORIGINAL: SELECT old_text,old_flags FROM `text` WHERE old_id = ? LIMIT 1

(user_id is primary key)

ON NEW: SELECT old_text,old_flags FROM `text` WHERE old_id = ? LIMIT 1
IF EMPTY 
	ON OLD (cacheable): SELECT * FROM `text` WHERE old_id = ? LIMIT 1
	ON NEW (cacheable): INSERT IGNORE INTO `text` VALUES(results from above);
	ON NEW (cacheable): SELECT old_text,old_flags FROM `text` WHERE old_id = ? LIMIT 1
	
	
//------------------------------------------------------------------
//	 					FROM THE selectPage TRANSACTION
//------------------------------------------------------------------
	
ORIGINAL: INSERT IGNORE INTO `watchlist` (wl_user,wl_namespace,wl_title,wl_notificationtimestamp) VALUES (?,?,?,NULL);

ON OLD (cacheable): SELECT * FROM watchlist WHERE wl_user=? AND wl_namespace = ? AND wl_title=?  (the where clause is the intersection of the above and the unique/primary keys)
ON NEW (cacheable): INSERT IGNORE INTO watchlsit VALUES (results from above);
ON NEW: INSERT IGNORE INTO `watchlist` (wl_user,wl_namespace,wl_title,wl_notificationtimestamp) VALUES (?,?,?,NULL);
	
//------------------------------------------------------------------

ORIGINAL: UPDATE  `user` SET user_touched = ? WHERE user_id = ?;

ON NEW: UPDATE  `user` SET user_touched = ? WHERE user_id = ?;
IF NO ROWS MATCHED
	ON OLD (cacheable): SELECT * FROM user WHERE user_id=?
	ON NEW (cacheable): INSERT IGNORE INTO user VALUES (results from above);
	ON NEW (cacheable): UPDATE  `user` SET user_touched = ? WHERE user_id = ?;



	
