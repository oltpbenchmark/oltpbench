This is the original README included in this repository. We believe that our
version is "better," but these directions still apply for generating the
TPC-C data.



Instructions for building
-------------------------

Use of JDK 1.5 is recommended, build with "ant jar" from the command line of 
the base directory or use your favorite IDE such as Netbeans or Eclipse.  


Instructions for running
------------------------
The below scripts all use relative paths, but, they depend on JAVA_HOME
environment varibale being set so that the correct runtime can be found.

JDBC drivers and sample "?.properties" files are included to make it extremely easy for
you to test out the performance of EnterpriseDB, PostgreSQL, MySQL, Oracle, & SQL Svr
in your environment.


1. Go to the 'run/scripts' directory, edit the appropriate "??????.properties" file to 
   point to the database instance you'd like to test.   Of course you'll substitute in
   the name of your appropriate config file in the command lines below.


2. Run the "sqlTableCreates" to create the base tables.

      -  runSQL EnterpriseDB.properties sqlTableCreates

   Note:  "sqlTableCreates" will truncate all the tables so you can start over clean.
          There is also a "sqlTableDrops" script if you need it.


3. Run the "loadData" command file to load all of the default data for a benchmark:


  A.) Approximately half a million rows in total will be loaded across 9 tables
      per Warehouse.  (The default is numWarehouses=1)  A decent test size of data
      totaling about 1 GB is 10 warehouses as follows:
        $ loadData EnterpriseDB.properties numWarehouses=10

  B.) Alternatively, you may choose to generate test out to CSV files that can be 
      bulk loaded as follows:
        $ loadData EnterpriseDB.properties numWarehouses=10 fileLocation=c:/temp/

      These CSV files can be bulk loaded into EDB-Postgres via the following:
        $  runSQL EnterpriseDB.properties sqlTableCopies

      You may clean out the data in the tables without dropping them via:
        $  runSQL EnterpriseDB.properties sqlTableTruncates


4. Run the "runSQL" command file to execute the SQL script "sqlIndexCreates" to 
   create the primary keys & other indexes on the tables.

      -  runSQL EnterpriseDB.properties sqlIndexCreates


5. Run the "runBenchmark" command file to execute the swing GUI application to 
   test the database.  Don't forget to set the number of warehouses equal to the
   number you created in step 3

      -  runBenchmark EnterpriseDB.properties
